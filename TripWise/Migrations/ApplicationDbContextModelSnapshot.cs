// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TripWise;

#nullable disable

namespace TripWise.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TripWise.Models.Agent", b =>
                {
                    b.Property<int>("AgentCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentCode"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AgentCode");

                    b.ToTable("Agents", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("CityId");

                    b.HasIndex("CountryCode");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.CompanyType", b =>
                {
                    b.Property<int>("CompanyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CompanyTypeId");

                    b.ToTable("CompanyTypes", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.Contract", b =>
                {
                    b.Property<int>("ContractCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractCode"));

                    b.Property<int?>("AgentCode")
                        .HasColumnType("int");

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<int>("OfferCode")
                        .HasColumnType("int");

                    b.Property<int?>("OfferCode1")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("PaymentTime")
                        .HasColumnType("time");

                    b.Property<bool>("Refunded")
                        .HasColumnType("bit");

                    b.Property<decimal?>("RefundedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("RefundedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeSigned")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ContractCode");

                    b.HasIndex("AgentCode");

                    b.HasIndex("AgentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("OfferCode");

                    b.HasIndex("OfferCode1");

                    b.ToTable("Contracts", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryCode");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CustomerFrom")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsPartner")
                        .HasColumnType("bit");

                    b.HasKey("HotelId");

                    b.HasIndex("CityId");

                    b.ToTable("Hotels", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.HotelService", b =>
                {
                    b.Property<int>("HotelServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelServiceId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("HotelServiceId");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Hotel_Service", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.Offer", b =>
                {
                    b.Property<int>("OfferCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferCode"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActiveTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AgentCode")
                        .HasColumnType("int");

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<string>("OfferName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PromoOfferCode")
                        .HasColumnType("int");

                    b.Property<int?>("PromoOfferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeAccepted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("OfferCode");

                    b.HasIndex("AgentCode");

                    b.HasIndex("AgentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("PromoOfferCode");

                    b.HasIndex("PromoOfferId");

                    b.ToTable("Offers", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.OfferHotelService", b =>
                {
                    b.Property<int>("OfferCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferCode"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("HotelServiceId")
                        .HasColumnType("int");

                    b.Property<int>("OfferCode1")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OfferCode");

                    b.HasIndex("HotelServiceId");

                    b.HasIndex("OfferCode1");

                    b.ToTable("OfferHotelServices", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.OfferTransportService", b =>
                {
                    b.Property<int>("OfferCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferCode"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OfferCode1")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransportServiceId")
                        .HasColumnType("int");

                    b.HasKey("OfferCode");

                    b.HasIndex("OfferCode1");

                    b.HasIndex("TransportServiceId");

                    b.ToTable("OfferTransportServices", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.PromoOffer", b =>
                {
                    b.Property<int>("PromoOfferCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromoOfferCode"));

                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActiveTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AgentCode")
                        .HasColumnType("int");

                    b.Property<string>("PromoOfferName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PromoOfferCode");

                    b.HasIndex("AgentCode");

                    b.ToTable("PromoOffers", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.PromoOfferHotelService", b =>
                {
                    b.Property<int>("PromoOfferId")
                        .HasColumnType("int");

                    b.Property<int>("HotelServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PromoOfferId", "HotelServiceId");

                    b.HasIndex("HotelServiceId");

                    b.ToTable("PromoOfferHotelServices", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.PromoOfferTransportService", b =>
                {
                    b.Property<int>("PromoOfferId")
                        .HasColumnType("int");

                    b.Property<int>("TransportServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TransportServiceId1")
                        .HasColumnType("int");

                    b.HasKey("PromoOfferId", "TransportServiceId");

                    b.HasIndex("TransportServiceId");

                    b.HasIndex("TransportServiceId1");

                    b.ToTable("PromoOfferTransportServices", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.RoomType", b =>
                {
                    b.Property<int>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoomTypeId");

                    b.ToTable("RoomTypes", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.TicketType", b =>
                {
                    b.Property<int>("TicketTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TicketTypeId");

                    b.ToTable("TicketTypes", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.TransportCompany", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompanyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HQAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsPartner")
                        .HasColumnType("bit");

                    b.HasKey("CompanyId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("Transport_Company", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.TransportService", b =>
                {
                    b.Property<int>("TransportServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportServiceId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("FromCityId")
                        .HasColumnType("int");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ToCityId")
                        .HasColumnType("int");

                    b.Property<int>("TransportCompanyId")
                        .HasColumnType("int");

                    b.HasKey("TransportServiceId");

                    b.HasIndex("FromCityId");

                    b.HasIndex("TicketTypeId");

                    b.HasIndex("ToCityId");

                    b.HasIndex("TransportCompanyId");

                    b.ToTable("Transport_Service", (string)null);
                });

            modelBuilder.Entity("TripWise.Models.City", b =>
                {
                    b.HasOne("TripWise.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TripWise.Models.Contract", b =>
                {
                    b.HasOne("TripWise.Models.Agent", null)
                        .WithMany("Contracts")
                        .HasForeignKey("AgentCode");

                    b.HasOne("TripWise.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripWise.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripWise.Models.Customer", null)
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("TripWise.Models.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TripWise.Models.Offer", null)
                        .WithMany("Contracts")
                        .HasForeignKey("OfferCode1");

                    b.Navigation("Agent");

                    b.Navigation("Customer");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("TripWise.Models.Hotel", b =>
                {
                    b.HasOne("TripWise.Models.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TripWise.Models.HotelService", b =>
                {
                    b.HasOne("TripWise.Models.Hotel", "Hotel")
                        .WithMany("HotelServices")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripWise.Models.RoomType", "RoomType")
                        .WithMany("HotelServices")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("TripWise.Models.Offer", b =>
                {
                    b.HasOne("TripWise.Models.Agent", null)
                        .WithMany("Offers")
                        .HasForeignKey("AgentCode");

                    b.HasOne("TripWise.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripWise.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripWise.Models.Customer", null)
                        .WithMany("Offers")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("TripWise.Models.PromoOffer", null)
                        .WithMany("Offers")
                        .HasForeignKey("PromoOfferCode");

                    b.HasOne("TripWise.Models.PromoOffer", "PromoOffer")
                        .WithMany()
                        .HasForeignKey("PromoOfferId");

                    b.Navigation("Agent");

                    b.Navigation("Customer");

                    b.Navigation("PromoOffer");
                });

            modelBuilder.Entity("TripWise.Models.OfferHotelService", b =>
                {
                    b.HasOne("TripWise.Models.HotelService", "HotelService")
                        .WithMany("Offers")
                        .HasForeignKey("HotelServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripWise.Models.Offer", "Offer")
                        .WithMany("OfferHotelServices")
                        .HasForeignKey("OfferCode1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelService");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("TripWise.Models.OfferTransportService", b =>
                {
                    b.HasOne("TripWise.Models.Offer", "Offer")
                        .WithMany("OfferTransportServices")
                        .HasForeignKey("OfferCode1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripWise.Models.TransportService", "TransportService")
                        .WithMany("Offers")
                        .HasForeignKey("TransportServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("TransportService");
                });

            modelBuilder.Entity("TripWise.Models.PromoOffer", b =>
                {
                    b.HasOne("TripWise.Models.Agent", null)
                        .WithMany("PromoOffers")
                        .HasForeignKey("AgentCode");
                });

            modelBuilder.Entity("TripWise.Models.PromoOfferHotelService", b =>
                {
                    b.HasOne("TripWise.Models.HotelService", "HotelService")
                        .WithMany("PromoOffers")
                        .HasForeignKey("HotelServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripWise.Models.PromoOffer", "PromoOffer")
                        .WithMany("PromoOfferHotelServices")
                        .HasForeignKey("PromoOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelService");

                    b.Navigation("PromoOffer");
                });

            modelBuilder.Entity("TripWise.Models.PromoOfferTransportService", b =>
                {
                    b.HasOne("TripWise.Models.PromoOffer", "PromoOffer")
                        .WithMany("PromoOfferTransportServices")
                        .HasForeignKey("PromoOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripWise.Models.TransportService", "TransportService")
                        .WithMany()
                        .HasForeignKey("TransportServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripWise.Models.TransportService", null)
                        .WithMany("PromoOffers")
                        .HasForeignKey("TransportServiceId1");

                    b.Navigation("PromoOffer");

                    b.Navigation("TransportService");
                });

            modelBuilder.Entity("TripWise.Models.TransportCompany", b =>
                {
                    b.HasOne("TripWise.Models.City", "City")
                        .WithMany("TransportCompanies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripWise.Models.CompanyType", "CompanyType")
                        .WithMany("TransportCompanies")
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("CompanyType");
                });

            modelBuilder.Entity("TripWise.Models.TransportService", b =>
                {
                    b.HasOne("TripWise.Models.City", "FromCity")
                        .WithMany()
                        .HasForeignKey("FromCityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TripWise.Models.TicketType", "TicketType")
                        .WithMany("TransportServices")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TripWise.Models.City", "ToCity")
                        .WithMany()
                        .HasForeignKey("ToCityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TripWise.Models.TransportCompany", "TransportCompany")
                        .WithMany("TransportServices")
                        .HasForeignKey("TransportCompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromCity");

                    b.Navigation("TicketType");

                    b.Navigation("ToCity");

                    b.Navigation("TransportCompany");
                });

            modelBuilder.Entity("TripWise.Models.Agent", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Offers");

                    b.Navigation("PromoOffers");
                });

            modelBuilder.Entity("TripWise.Models.City", b =>
                {
                    b.Navigation("Hotels");

                    b.Navigation("TransportCompanies");
                });

            modelBuilder.Entity("TripWise.Models.CompanyType", b =>
                {
                    b.Navigation("TransportCompanies");
                });

            modelBuilder.Entity("TripWise.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("TripWise.Models.Customer", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("TripWise.Models.Hotel", b =>
                {
                    b.Navigation("HotelServices");
                });

            modelBuilder.Entity("TripWise.Models.HotelService", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("PromoOffers");
                });

            modelBuilder.Entity("TripWise.Models.Offer", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("OfferHotelServices");

                    b.Navigation("OfferTransportServices");
                });

            modelBuilder.Entity("TripWise.Models.PromoOffer", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("PromoOfferHotelServices");

                    b.Navigation("PromoOfferTransportServices");
                });

            modelBuilder.Entity("TripWise.Models.RoomType", b =>
                {
                    b.Navigation("HotelServices");
                });

            modelBuilder.Entity("TripWise.Models.TicketType", b =>
                {
                    b.Navigation("TransportServices");
                });

            modelBuilder.Entity("TripWise.Models.TransportCompany", b =>
                {
                    b.Navigation("TransportServices");
                });

            modelBuilder.Entity("TripWise.Models.TransportService", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("PromoOffers");
                });
#pragma warning restore 612, 618
        }
    }
}
